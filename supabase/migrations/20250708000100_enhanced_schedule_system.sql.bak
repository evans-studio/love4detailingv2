-- Enhanced Schedule System Implementation
-- Based on schedule.md specifications for professional time slot management

-- Drop existing constraints that might conflict
ALTER TABLE available_slots DROP CONSTRAINT IF EXISTS available_slots_template_id_fkey;
ALTER TABLE schedule_slots DROP CONSTRAINT IF EXISTS schedule_slots_template_id_fkey;

-- Enhanced schedule_templates table with additional fields
ALTER TABLE schedule_templates 
ADD COLUMN IF NOT EXISTS priority INTEGER DEFAULT 1,
ADD COLUMN IF NOT EXISTS is_default BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS business_hours_start TIME DEFAULT '09:00:00',
ADD COLUMN IF NOT EXISTS business_hours_end TIME DEFAULT '18:00:00',
ADD COLUMN IF NOT EXISTS buffer_minutes INTEGER DEFAULT 30;

-- Enhanced schedule_slots table with additional fields for flexible scheduling
ALTER TABLE schedule_slots
ADD COLUMN IF NOT EXISTS duration_minutes INTEGER DEFAULT 120,
ADD COLUMN IF NOT EXISTS display_order INTEGER DEFAULT 0,
ADD COLUMN IF NOT EXISTS is_standard_slot BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS custom_label TEXT,
ADD COLUMN IF NOT EXISTS slot_type TEXT DEFAULT 'regular' CHECK (slot_type IN ('regular', 'extended', 'priority', 'special')),
ADD COLUMN IF NOT EXISTS minimum_notice_hours INTEGER DEFAULT 24,
ADD COLUMN IF NOT EXISTS service_id UUID REFERENCES services(id);

-- Enhanced available_slots table with capacity management
ALTER TABLE available_slots
ADD COLUMN IF NOT EXISTS available_capacity INTEGER DEFAULT 1,
ADD COLUMN IF NOT EXISTS total_capacity INTEGER DEFAULT 1,
ADD COLUMN IF NOT EXISTS is_override BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS override_reason TEXT,
ADD COLUMN IF NOT EXISTS priority_level INTEGER DEFAULT 1,
ADD COLUMN IF NOT EXISTS booking_window_start TIMESTAMP WITH TIME ZONE,
ADD COLUMN IF NOT EXISTS booking_window_end TIMESTAMP WITH TIME ZONE,
ADD COLUMN IF NOT EXISTS special_requirements TEXT;

-- Create new slot_bookings junction table for many-to-many relationship
CREATE TABLE IF NOT EXISTS slot_bookings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    slot_id UUID NOT NULL REFERENCES available_slots(id) ON DELETE CASCADE,
    booking_id UUID NOT NULL REFERENCES bookings(id) ON DELETE CASCADE,
    booking_date DATE NOT NULL,
    status TEXT DEFAULT 'active' CHECK (status IN ('active', 'cancelled', 'completed')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()),
    UNIQUE(slot_id, booking_id)
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_schedule_slots_day_time ON schedule_slots(day_of_week, start_time);
CREATE INDEX IF NOT EXISTS idx_schedule_slots_template ON schedule_slots(template_id, is_active);
CREATE INDEX IF NOT EXISTS idx_schedule_slots_standard ON schedule_slots(is_standard_slot, is_active);
CREATE INDEX IF NOT EXISTS idx_available_slots_date ON available_slots(slot_date, start_time);
CREATE INDEX IF NOT EXISTS idx_available_slots_capacity ON available_slots(slot_date, available_capacity);
CREATE INDEX IF NOT EXISTS idx_available_slots_template ON available_slots(template_id, slot_date);
CREATE INDEX IF NOT EXISTS idx_slot_bookings_date ON slot_bookings(booking_date, status);
CREATE INDEX IF NOT EXISTS idx_slot_bookings_slot ON slot_bookings(slot_id, status);

-- Restore foreign key constraints
ALTER TABLE available_slots 
ADD CONSTRAINT available_slots_template_id_fkey 
FOREIGN KEY (template_id) REFERENCES schedule_templates(id) ON DELETE SET NULL;

ALTER TABLE schedule_slots 
ADD CONSTRAINT schedule_slots_template_id_fkey 
FOREIGN KEY (template_id) REFERENCES schedule_templates(id) ON DELETE CASCADE;

-- Add RLS policies for slot_bookings
ALTER TABLE slot_bookings ENABLE ROW LEVEL SECURITY;

-- Allow authenticated users to view slot bookings
CREATE POLICY "Users can view slot bookings" ON slot_bookings
    FOR SELECT USING (auth.role() = 'authenticated');

-- Allow admins to manage slot bookings
CREATE POLICY "Admins can manage slot bookings" ON slot_bookings
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role IN ('admin', 'staff', 'super_admin')
        )
    );

-- Update existing RLS policies for enhanced tables
DROP POLICY IF EXISTS "Users can view available slots" ON available_slots;
CREATE POLICY "Users can view available slots" ON available_slots
    FOR SELECT USING (
        NOT is_blocked AND 
        available_capacity > 0 AND
        (booking_window_start IS NULL OR booking_window_start <= now()) AND
        (booking_window_end IS NULL OR booking_window_end >= now())
    );

DROP POLICY IF EXISTS "Admins can manage available slots" ON available_slots;
CREATE POLICY "Admins can manage available slots" ON available_slots
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role IN ('admin', 'staff', 'super_admin')
        )
    );

-- Update schedule_slots policies
DROP POLICY IF EXISTS "Users can view schedule slots" ON schedule_slots;
CREATE POLICY "Users can view schedule slots" ON schedule_slots
    FOR SELECT USING (is_active = true);

DROP POLICY IF EXISTS "Admins can manage schedule slots" ON schedule_slots;
CREATE POLICY "Admins can manage schedule slots" ON schedule_slots
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role IN ('admin', 'staff', 'super_admin')
        )
    );

-- Update schedule_templates policies
DROP POLICY IF EXISTS "Users can view schedule templates" ON schedule_templates;
CREATE POLICY "Users can view schedule templates" ON schedule_templates
    FOR SELECT USING (is_active = true);

DROP POLICY IF EXISTS "Admins can manage schedule templates" ON schedule_templates;
CREATE POLICY "Admins can manage schedule templates" ON schedule_templates
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role IN ('admin', 'staff', 'super_admin')
        )
    );

-- Add triggers for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_schedule_templates_updated_at 
    BEFORE UPDATE ON schedule_templates 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_schedule_slots_updated_at 
    BEFORE UPDATE ON schedule_slots 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_available_slots_updated_at 
    BEFORE UPDATE ON available_slots 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_slot_bookings_updated_at 
    BEFORE UPDATE ON slot_bookings 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Insert default schedule template with standard 5 slots
INSERT INTO schedule_templates (name, description, is_active, is_default, created_at)
SELECT 
    'Standard Business Hours',
    'Default template with 5 standard time slots optimized for customer convenience',
    true,
    true,
    timezone('utc'::text, now())
WHERE NOT EXISTS (
    SELECT 1 FROM schedule_templates WHERE name = 'Standard Business Hours'
);

-- Insert standard 5 time slots for each day of the week using the template ID
WITH template_ref AS (
    SELECT id as template_id FROM schedule_templates WHERE name = 'Standard Business Hours' LIMIT 1
)
INSERT INTO schedule_slots (
    template_id, day_of_week, start_time, end_time, duration_minutes, 
    max_bookings, is_active, is_standard_slot, display_order, custom_label
) 
SELECT 
    t.template_id, day_of_week, start_time::time, end_time::time, duration_minutes,
    max_bookings, is_active, is_standard_slot, display_order, custom_label
FROM template_ref t,
(VALUES 
-- Monday (1)
(1, '10:00:00', '12:00:00', 120, 1, true, true, 1, '10:00 AM'),
(1, '12:00:00', '14:00:00', 120, 1, true, true, 2, '12:00 PM'),
(1, '14:00:00', '16:00:00', 120, 1, true, true, 3, '2:00 PM'),
(1, '16:00:00', '18:00:00', 120, 1, true, true, 4, '4:00 PM'),
(1, '18:00:00', '20:00:00', 120, 1, true, true, 5, '6:00 PM'),
-- Tuesday (2)
(2, '10:00:00', '12:00:00', 120, 1, true, true, 1, '10:00 AM'),
(2, '12:00:00', '14:00:00', 120, 1, true, true, 2, '12:00 PM'),
(2, '14:00:00', '16:00:00', 120, 1, true, true, 3, '2:00 PM'),
(2, '16:00:00', '18:00:00', 120, 1, true, true, 4, '4:00 PM'),
(2, '18:00:00', '20:00:00', 120, 1, true, true, 5, '6:00 PM'),
-- Wednesday (3)
(3, '10:00:00', '12:00:00', 120, 1, true, true, 1, '10:00 AM'),
(3, '12:00:00', '14:00:00', 120, 1, true, true, 2, '12:00 PM'),
(3, '14:00:00', '16:00:00', 120, 1, true, true, 3, '2:00 PM'),
(3, '16:00:00', '18:00:00', 120, 1, true, true, 4, '4:00 PM'),
(3, '18:00:00', '20:00:00', 120, 1, true, true, 5, '6:00 PM'),
-- Thursday (4)
(4, '10:00:00', '12:00:00', 120, 1, true, true, 1, '10:00 AM'),
(4, '12:00:00', '14:00:00', 120, 1, true, true, 2, '12:00 PM'),
(4, '14:00:00', '16:00:00', 120, 1, true, true, 3, '2:00 PM'),
(4, '16:00:00', '18:00:00', 120, 1, true, true, 4, '4:00 PM'),
(4, '18:00:00', '20:00:00', 120, 1, true, true, 5, '6:00 PM'),
-- Friday (5)
(5, '10:00:00', '12:00:00', 120, 1, true, true, 1, '10:00 AM'),
(5, '12:00:00', '14:00:00', 120, 1, true, true, 2, '12:00 PM'),
(5, '14:00:00', '16:00:00', 120, 1, true, true, 3, '2:00 PM'),
(5, '16:00:00', '18:00:00', 120, 1, true, true, 4, '4:00 PM'),
(5, '18:00:00', '20:00:00', 120, 1, true, true, 5, '6:00 PM'),
-- Saturday (6)
(6, '10:00:00', '12:00:00', 120, 1, true, true, 1, '10:00 AM'),
(6, '12:00:00', '14:00:00', 120, 1, true, true, 2, '12:00 PM'),
(6, '14:00:00', '16:00:00', 120, 1, true, true, 3, '2:00 PM'),
(6, '16:00:00', '18:00:00', 120, 1, true, true, 4, '4:00 PM'),
(6, '18:00:00', '20:00:00', 120, 1, true, true, 5, '6:00 PM')
) AS slots(day_of_week, start_time, end_time, duration_minutes, max_bookings, is_active, is_standard_slot, display_order, custom_label);

-- Create a helpful view for slot availability
CREATE OR REPLACE VIEW slot_availability_view AS
SELECT 
    s.id as slot_id,
    s.slot_date,
    s.start_time,
    s.end_time,
    s.available_capacity,
    s.total_capacity,
    s.is_blocked,
    s.block_reason,
    ss.custom_label,
    ss.is_standard_slot,
    ss.display_order,
    ss.slot_type,
    ss.duration_minutes,
    st.name as template_name,
    CASE 
        WHEN s.is_blocked THEN 'unavailable'
        WHEN s.available_capacity <= 0 THEN 'booked'
        WHEN s.available_capacity = 1 AND s.total_capacity > 1 THEN 'last_available'
        WHEN s.available_capacity > 0 THEN 'available'
        ELSE 'unavailable'
    END as availability_status,
    CASE 
        WHEN ss.is_standard_slot THEN 'standard'
        WHEN s.available_capacity = 1 AND s.total_capacity > 1 THEN 'popular'
        ELSE 'regular'
    END as slot_category
FROM available_slots s
LEFT JOIN schedule_slots ss ON s.template_id = ss.template_id 
    AND extract(dow from s.slot_date) = ss.day_of_week
    AND s.start_time = ss.start_time
LEFT JOIN schedule_templates st ON s.template_id = st.id
WHERE s.slot_date >= current_date
ORDER BY s.slot_date, s.start_time;

-- Grant access to the view
GRANT SELECT ON slot_availability_view TO authenticated;
GRANT SELECT ON slot_availability_view TO anon;