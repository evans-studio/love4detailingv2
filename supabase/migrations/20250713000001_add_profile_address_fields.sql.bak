-- Add address fields to users table for profile management
-- This allows users to save their default service address in their profile

BEGIN;

-- Add address columns to users table
ALTER TABLE users ADD COLUMN IF NOT EXISTS address TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS city VARCHAR(100);
ALTER TABLE users ADD COLUMN IF NOT EXISTS postcode VARCHAR(20);
ALTER TABLE users ADD COLUMN IF NOT EXISTS country VARCHAR(50) DEFAULT 'United Kingdom';

-- Add index for postcode lookups
CREATE INDEX IF NOT EXISTS idx_users_postcode ON users(postcode);

-- Update the trigger to handle the new timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Ensure the trigger exists for users table
DROP TRIGGER IF EXISTS update_users_updated_at ON users;
CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Update the stored procedures to handle address fields
CREATE OR REPLACE FUNCTION update_user_profile(
    user_id_param UUID,
    profile_data JSONB
)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    updated_user users%ROWTYPE;
    result JSONB;
BEGIN
    -- Update user profile with new data
    UPDATE users
    SET 
        full_name = COALESCE(profile_data->>'full_name', full_name),
        phone = COALESCE(profile_data->>'phone', phone),
        address = COALESCE(profile_data->>'address', address),
        city = COALESCE(profile_data->>'city', city),
        postcode = COALESCE(profile_data->>'postcode', postcode),
        country = COALESCE(profile_data->>'country', country),
        preferred_communication = COALESCE(profile_data->>'preferred_communication', preferred_communication),
        marketing_opt_in = COALESCE((profile_data->>'marketing_opt_in')::boolean, marketing_opt_in),
        updated_at = NOW()
    WHERE id = user_id_param
    RETURNING * INTO updated_user;
    
    IF NOT FOUND THEN
        RETURN jsonb_build_object('error', 'User not found');
    END IF;
    
    -- Build response
    result := jsonb_build_object(
        'success', true,
        'user', row_to_json(updated_user)
    );
    
    RETURN result;
EXCEPTION
    WHEN OTHERS THEN
        RETURN jsonb_build_object('error', SQLERRM);
END;
$$;

-- Update the get_user_profile function to include address fields
CREATE OR REPLACE FUNCTION get_user_profile(user_id_param UUID)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    user_record users%ROWTYPE;
    booking_stats JSONB;
    vehicle_count INTEGER;
    rewards_data JSONB;
    result JSONB;
BEGIN
    -- Get user record
    SELECT * INTO user_record FROM users WHERE id = user_id_param;
    
    IF NOT FOUND THEN
        RETURN jsonb_build_object('error', 'User not found');
    END IF;
    
    -- Get booking statistics
    SELECT jsonb_build_object(
        'total_bookings', COUNT(*),
        'confirmed_bookings', COUNT(*) FILTER (WHERE status = 'confirmed'),
        'completed_bookings', COUNT(*) FILTER (WHERE status = 'completed'),
        'total_spent_pence', COALESCE(SUM(total_price_pence) FILTER (WHERE status = 'completed'), 0)
    ) INTO booking_stats
    FROM bookings 
    WHERE user_id = user_id_param;
    
    -- Get vehicle count
    SELECT COUNT(*) INTO vehicle_count
    FROM vehicles 
    WHERE user_id = user_id_param AND is_active = true;
    
    -- Get rewards data (with fallback)
    SELECT jsonb_build_object(
        'points_balance', COALESCE(points_balance, 0),
        'tier', COALESCE(tier, 'bronze')
    ) INTO rewards_data
    FROM customer_rewards 
    WHERE user_id = user_id_param;
    
    IF rewards_data IS NULL THEN
        rewards_data := jsonb_build_object('points_balance', 0, 'tier', 'bronze');
    END IF;
    
    -- Build complete profile response
    result := jsonb_build_object(
        'id', user_record.id,
        'email', user_record.email,
        'full_name', COALESCE(user_record.full_name, ''),
        'phone', COALESCE(user_record.phone, ''),
        'address', COALESCE(user_record.address, ''),
        'city', COALESCE(user_record.city, ''),
        'postcode', COALESCE(user_record.postcode, ''),
        'country', COALESCE(user_record.country, 'United Kingdom'),
        'role', user_record.role,
        'is_active', user_record.is_active,
        'email_verified_at', user_record.email_verified_at,
        'preferred_communication', COALESCE(user_record.preferred_communication, 'email'),
        'marketing_opt_in', COALESCE(user_record.marketing_opt_in, false),
        'created_at', user_record.created_at,
        'updated_at', user_record.updated_at,
        'stats', jsonb_build_object(
            'total_bookings', booking_stats->>'total_bookings',
            'confirmed_bookings', booking_stats->>'confirmed_bookings', 
            'completed_bookings', booking_stats->>'completed_bookings',
            'total_spent_pence', booking_stats->>'total_spent_pence',
            'total_vehicles', vehicle_count,
            'rewards_points', rewards_data->>'points_balance',
            'rewards_tier', rewards_data->>'tier'
        )
    );
    
    RETURN result;
EXCEPTION
    WHEN OTHERS THEN
        RETURN jsonb_build_object('error', SQLERRM);
END;
$$;

COMMIT;