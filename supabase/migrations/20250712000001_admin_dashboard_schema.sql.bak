-- Admin Dashboard Database Schema
-- Implementation of admin.md specifications
-- Phase 1: Core Schedule & Booking Management

-- Admin schedule configuration table
CREATE TABLE IF NOT EXISTS admin_schedule_config (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    admin_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    day_of_week INTEGER NOT NULL CHECK (day_of_week >= 0 AND day_of_week <= 6),
    is_working_day BOOLEAN DEFAULT true,
    start_time TIME,
    end_time TIME,
    max_slots_per_hour INTEGER DEFAULT 1,
    slot_duration_minutes INTEGER DEFAULT 120, -- Default 2 hour slots
    break_start_time TIME,
    break_end_time TIME,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(admin_user_id, day_of_week)
);

-- Business policies configuration table
CREATE TABLE IF NOT EXISTS business_policies (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    admin_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    policy_type TEXT NOT NULL CHECK (policy_type IN ('cancellation', 'rescheduling', 'service_area', 'pricing', 'booking_rules')),
    policy_name TEXT NOT NULL,
    policy_rules JSONB NOT NULL,
    is_active BOOLEAN DEFAULT true,
    applies_from DATE DEFAULT CURRENT_DATE,
    applies_until DATE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Admin activity tracking table
CREATE TABLE IF NOT EXISTS admin_activity_log (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    admin_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    action_type TEXT NOT NULL CHECK (action_type IN ('schedule_update', 'booking_update', 'customer_contact', 'policy_change', 'status_change')),
    target_type TEXT CHECK (target_type IN ('booking', 'schedule', 'customer', 'policy', 'service')),
    target_id UUID,
    target_reference TEXT, -- For human-readable reference (booking number, customer name, etc.)
    action_description TEXT,
    details JSONB,
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Admin notifications table
CREATE TABLE IF NOT EXISTS admin_notifications (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    admin_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    notification_type TEXT NOT NULL CHECK (notification_type IN ('new_booking', 'booking_cancelled', 'booking_rescheduled', 'customer_message', 'system_alert')),
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    related_type TEXT CHECK (related_type IN ('booking', 'customer', 'system')),
    related_id UUID,
    priority TEXT DEFAULT 'normal' CHECK (priority IN ('low', 'normal', 'high', 'urgent')),
    is_read BOOLEAN DEFAULT false,
    is_archived BOOLEAN DEFAULT false,
    action_url TEXT,
    expires_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Quick stats cache table for performance
CREATE TABLE IF NOT EXISTS admin_stats_cache (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    admin_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    stat_date DATE NOT NULL,
    total_bookings INTEGER DEFAULT 0,
    completed_bookings INTEGER DEFAULT 0,
    cancelled_bookings INTEGER DEFAULT 0,
    pending_bookings INTEGER DEFAULT 0,
    total_revenue_pence INTEGER DEFAULT 0,
    total_customers INTEGER DEFAULT 0,
    new_customers INTEGER DEFAULT 0,
    avg_booking_value_pence INTEGER DEFAULT 0,
    busiest_hour INTEGER,
    popular_service_id UUID REFERENCES services(id),
    additional_stats JSONB DEFAULT '{}',
    calculated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(admin_user_id, stat_date)
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_admin_schedule_config_admin_day ON admin_schedule_config(admin_user_id, day_of_week);
CREATE INDEX IF NOT EXISTS idx_business_policies_admin_type ON business_policies(admin_user_id, policy_type, is_active);
CREATE INDEX IF NOT EXISTS idx_admin_activity_log_admin_date ON admin_activity_log(admin_user_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_admin_activity_log_target ON admin_activity_log(target_type, target_id);
CREATE INDEX IF NOT EXISTS idx_admin_notifications_admin_unread ON admin_notifications(admin_user_id, is_read, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_admin_stats_cache_admin_date ON admin_stats_cache(admin_user_id, stat_date DESC);

-- RLS Policies
ALTER TABLE admin_schedule_config ENABLE ROW LEVEL SECURITY;
ALTER TABLE business_policies ENABLE ROW LEVEL SECURITY;
ALTER TABLE admin_activity_log ENABLE ROW LEVEL SECURITY;
ALTER TABLE admin_notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE admin_stats_cache ENABLE ROW LEVEL SECURITY;

-- RLS Policies for admin_schedule_config
CREATE POLICY "Admin can manage own schedule" ON admin_schedule_config
    FOR ALL USING (
        admin_user_id = auth.uid() AND 
        EXISTS (
            SELECT 1 FROM users 
            WHERE id = auth.uid() 
            AND role IN ('admin', 'staff', 'super_admin')
        )
    );

-- RLS Policies for business_policies  
CREATE POLICY "Admin can manage own policies" ON business_policies
    FOR ALL USING (
        admin_user_id = auth.uid() AND 
        EXISTS (
            SELECT 1 FROM users 
            WHERE id = auth.uid() 
            AND role IN ('admin', 'staff', 'super_admin')
        )
    );

-- RLS Policies for admin_activity_log
CREATE POLICY "Admin can view own activity" ON admin_activity_log
    FOR SELECT USING (
        admin_user_id = auth.uid() AND 
        EXISTS (
            SELECT 1 FROM users 
            WHERE id = auth.uid() 
            AND role IN ('admin', 'staff', 'super_admin')
        )
    );

CREATE POLICY "System can insert admin activity" ON admin_activity_log
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM users 
            WHERE id = admin_user_id 
            AND role IN ('admin', 'staff', 'super_admin')
        )
    );

-- RLS Policies for admin_notifications
CREATE POLICY "Admin can manage own notifications" ON admin_notifications
    FOR ALL USING (
        admin_user_id = auth.uid() AND 
        EXISTS (
            SELECT 1 FROM users 
            WHERE id = auth.uid() 
            AND role IN ('admin', 'staff', 'super_admin')
        )
    );

-- RLS Policies for admin_stats_cache
CREATE POLICY "Admin can view own stats" ON admin_stats_cache
    FOR ALL USING (
        admin_user_id = auth.uid() AND 
        EXISTS (
            SELECT 1 FROM users 
            WHERE id = auth.uid() 
            AND role IN ('admin', 'staff', 'super_admin')
        )
    );

-- Default admin schedule setup function
CREATE OR REPLACE FUNCTION setup_default_admin_schedule(p_admin_id UUID)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_day INTEGER;
    v_result JSONB := '{"success": true, "message": "Default schedule created"}';
BEGIN
    -- Verify admin user
    IF NOT EXISTS (
        SELECT 1 FROM users 
        WHERE id = p_admin_id 
        AND role IN ('admin', 'staff', 'super_admin')
    ) THEN
        RETURN '{"success": false, "error": "Invalid admin user"}';
    END IF;

    -- Create default schedule (Monday-Friday 9-5, Saturday 9-3, Sunday off)
    FOR v_day IN 0..6 LOOP
        INSERT INTO admin_schedule_config (
            admin_user_id,
            day_of_week,
            is_working_day,
            start_time,
            end_time,
            max_slots_per_hour,
            slot_duration_minutes
        ) VALUES (
            p_admin_id,
            v_day,
            CASE 
                WHEN v_day = 0 THEN false  -- Sunday off
                WHEN v_day = 6 THEN true   -- Saturday
                ELSE true                  -- Monday-Friday
            END,
            CASE 
                WHEN v_day = 0 THEN NULL   -- Sunday
                WHEN v_day = 6 THEN '09:00'::TIME -- Saturday 9-3
                ELSE '09:00'::TIME         -- Monday-Friday 9-5
            END,
            CASE 
                WHEN v_day = 0 THEN NULL   -- Sunday
                WHEN v_day = 6 THEN '15:00'::TIME -- Saturday 9-3
                ELSE '17:00'::TIME         -- Monday-Friday 9-5
            END,
            1, -- 1 slot per hour
            120 -- 2 hour slots
        ) ON CONFLICT (admin_user_id, day_of_week) DO NOTHING;
    END LOOP;

    -- Log the activity
    INSERT INTO admin_activity_log (
        admin_user_id,
        action_type,
        target_type,
        action_description,
        details
    ) VALUES (
        p_admin_id,
        'schedule_update',
        'schedule',
        'Default schedule setup completed',
        '{"days_configured": 7, "default_hours": "9-5 weekdays, 9-3 Saturday"}'
    );

    RETURN v_result;
END;
$$;

-- Trigger to auto-setup schedule for new admin users
CREATE OR REPLACE FUNCTION trigger_setup_admin_schedule()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- Check if this is a new admin user
    IF NEW.role IN ('admin', 'staff', 'super_admin') AND 
       (OLD IS NULL OR OLD.role NOT IN ('admin', 'staff', 'super_admin')) THEN
        
        -- Setup default schedule
        PERFORM setup_default_admin_schedule(NEW.id);
        
        -- Create welcome notification
        INSERT INTO admin_notifications (
            admin_user_id,
            notification_type,
            title,
            message,
            priority
        ) VALUES (
            NEW.id,
            'system_alert',
            'Welcome to Love4Detailing Admin',
            'Your admin account has been set up with a default schedule. You can customize your working hours in the Schedule section.',
            'normal'
        );
    END IF;
    
    RETURN NEW;
END;
$$;

-- Create trigger for auto admin setup
DROP TRIGGER IF EXISTS trigger_setup_admin_schedule_on_user_update ON users;
CREATE TRIGGER trigger_setup_admin_schedule_on_user_update
    AFTER INSERT OR UPDATE OF role ON users
    FOR EACH ROW
    EXECUTE FUNCTION trigger_setup_admin_schedule();

-- Update timestamp triggers
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_admin_schedule_config_updated_at 
    BEFORE UPDATE ON admin_schedule_config 
    FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_business_policies_updated_at 
    BEFORE UPDATE ON business_policies 
    FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();