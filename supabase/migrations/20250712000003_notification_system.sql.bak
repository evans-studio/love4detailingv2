-- Notification System for Love4Detailing Admin
-- Real-time notifications for admin users

-- Notifications table
CREATE TABLE IF NOT EXISTS notifications (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL CHECK (type IN (
        'new_booking',
        'booking_cancelled',
        'booking_updated',
        'booking_completed',
        'payment_received',
        'new_customer',
        'system_alert',
        'revenue_milestone',
        'service_reminder'
    )),
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    action_url VARCHAR(500), -- URL to navigate to when clicked
    action_data JSONB, -- Additional data for the action (booking_id, customer_id, etc.)
    read_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE,
    priority VARCHAR(20) DEFAULT 'normal' CHECK (priority IN ('low', 'normal', 'high', 'urgent')),
    category VARCHAR(50) DEFAULT 'general',
    icon VARCHAR(50), -- Icon name for UI display
    metadata JSONB -- Additional metadata
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON notifications(user_id);
CREATE INDEX IF NOT EXISTS idx_notifications_type ON notifications(type);
CREATE INDEX IF NOT EXISTS idx_notifications_created_at ON notifications(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_notifications_unread ON notifications(user_id, read_at) WHERE read_at IS NULL;
CREATE INDEX IF NOT EXISTS idx_notifications_priority ON notifications(priority, created_at DESC);

-- Enable RLS
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Users can view their own notifications"
    ON notifications FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY "Admins can view all notifications"
    ON notifications FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM user_profiles 
            WHERE user_id = auth.uid() 
            AND role IN ('admin', 'super_admin', 'staff')
        )
    );

CREATE POLICY "System can create notifications"
    ON notifications FOR INSERT
    WITH CHECK (true);

CREATE POLICY "Users can update their own notifications"
    ON notifications FOR UPDATE
    USING (auth.uid() = user_id);

CREATE POLICY "Admins can update all notifications"
    ON notifications FOR UPDATE
    USING (
        EXISTS (
            SELECT 1 FROM user_profiles 
            WHERE user_id = auth.uid() 
            AND role IN ('admin', 'super_admin')
        )
    );

-- Function to create notification
CREATE OR REPLACE FUNCTION create_notification(
    p_user_id UUID,
    p_type VARCHAR,
    p_title VARCHAR,
    p_message TEXT,
    p_action_url VARCHAR DEFAULT NULL,
    p_action_data JSONB DEFAULT NULL,
    p_priority VARCHAR DEFAULT 'normal',
    p_category VARCHAR DEFAULT 'general',
    p_icon VARCHAR DEFAULT NULL,
    p_expires_at TIMESTAMP WITH TIME ZONE DEFAULT NULL
)
RETURNS UUID AS $$
DECLARE
    notification_id UUID;
BEGIN
    INSERT INTO notifications (
        user_id,
        type,
        title,
        message,
        action_url,
        action_data,
        priority,
        category,
        icon,
        expires_at
    ) VALUES (
        p_user_id,
        p_type,
        p_title,
        p_message,
        p_action_url,
        p_action_data,
        p_priority,
        p_category,
        p_icon,
        p_expires_at
    ) RETURNING id INTO notification_id;
    
    RETURN notification_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to mark notification as read
CREATE OR REPLACE FUNCTION mark_notification_read(
    p_notification_id UUID,
    p_user_id UUID
)
RETURNS BOOLEAN AS $$
BEGIN
    UPDATE notifications 
    SET read_at = NOW()
    WHERE id = p_notification_id 
    AND user_id = p_user_id 
    AND read_at IS NULL;
    
    RETURN FOUND;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to mark all notifications as read
CREATE OR REPLACE FUNCTION mark_all_notifications_read(
    p_user_id UUID
)
RETURNS INTEGER AS $$
DECLARE
    updated_count INTEGER;
BEGIN
    UPDATE notifications 
    SET read_at = NOW()
    WHERE user_id = p_user_id 
    AND read_at IS NULL;
    
    GET DIAGNOSTICS updated_count = ROW_COUNT;
    RETURN updated_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to get unread notification count
CREATE OR REPLACE FUNCTION get_unread_notification_count(
    p_user_id UUID
)
RETURNS INTEGER AS $$
DECLARE
    unread_count INTEGER;
BEGIN
    SELECT COUNT(*)
    INTO unread_count
    FROM notifications
    WHERE user_id = p_user_id 
    AND read_at IS NULL
    AND (expires_at IS NULL OR expires_at > NOW());
    
    RETURN unread_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to automatically create notifications for booking events
CREATE OR REPLACE FUNCTION notify_booking_events()
RETURNS TRIGGER AS $$
DECLARE
    admin_user_id UUID;
    notification_title VARCHAR(255);
    notification_message TEXT;
    action_url VARCHAR(500);
    booking_ref VARCHAR(50);
    customer_name VARCHAR(255);
BEGIN
    -- Get admin users to notify
    FOR admin_user_id IN 
        SELECT up.user_id 
        FROM user_profiles up 
        WHERE up.role IN ('admin', 'super_admin', 'staff')
    LOOP
        -- Get booking details
        SELECT 
            COALESCE(NEW.booking_reference, OLD.booking_reference),
            COALESCE(NEW.customer_data->>'full_name', OLD.customer_data->>'full_name')
        INTO booking_ref, customer_name;
        
        -- Handle different trigger operations
        IF TG_OP = 'INSERT' THEN
            notification_title := 'New Booking Received';
            notification_message := 'New booking from ' || customer_name || ' (' || booking_ref || ')';
            action_url := '/admin/bookings/' || NEW.id;
            
            PERFORM create_notification(
                admin_user_id,
                'new_booking',
                notification_title,
                notification_message,
                action_url,
                jsonb_build_object('booking_id', NEW.id, 'customer_name', customer_name),
                'normal',
                'booking',
                'Calendar'
            );
            
        ELSIF TG_OP = 'UPDATE' THEN
            -- Check if status changed to cancelled
            IF OLD.status != 'cancelled' AND NEW.status = 'cancelled' THEN
                notification_title := 'Booking Cancelled';
                notification_message := 'Booking ' || booking_ref || ' has been cancelled';
                action_url := '/admin/bookings/' || NEW.id;
                
                PERFORM create_notification(
                    admin_user_id,
                    'booking_cancelled',
                    notification_title,
                    notification_message,
                    action_url,
                    jsonb_build_object('booking_id', NEW.id, 'customer_name', customer_name),
                    'high',
                    'booking',
                    'XCircle'
                );
                
            -- Check if status changed to completed
            ELSIF OLD.status != 'completed' AND NEW.status = 'completed' THEN
                notification_title := 'Service Completed';
                notification_message := 'Service completed for ' || customer_name || ' (' || booking_ref || ')';
                action_url := '/admin/bookings/' || NEW.id;
                
                PERFORM create_notification(
                    admin_user_id,
                    'booking_completed',
                    notification_title,
                    notification_message,
                    action_url,
                    jsonb_build_object('booking_id', NEW.id, 'customer_name', customer_name),
                    'normal',
                    'booking',
                    'CheckCircle'
                );
            END IF;
        END IF;
    END LOOP;
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for booking events (if bookings table exists)
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'bookings') THEN
        DROP TRIGGER IF EXISTS notify_booking_events_trigger ON bookings;
        CREATE TRIGGER notify_booking_events_trigger
            AFTER INSERT OR UPDATE ON bookings
            FOR EACH ROW
            EXECUTE FUNCTION notify_booking_events();
    END IF;
END
$$;

-- Insert sample notifications for demo purposes
INSERT INTO notifications (
    user_id,
    type,
    title,
    message,
    action_url,
    action_data,
    priority,
    category,
    icon,
    created_at
) 
SELECT 
    up.user_id,
    'new_booking',
    'New booking from John Smith',
    'Premium Detail service booked for Mercedes C-Class',
    '/admin/bookings',
    '{"booking_reference": "L4D-2024-001", "customer_name": "John Smith"}',
    'normal',
    'booking',
    'Calendar',
    NOW() - INTERVAL '2 minutes'
FROM user_profiles up 
WHERE up.role IN ('admin', 'super_admin', 'staff')
LIMIT 1;

INSERT INTO notifications (
    user_id,
    type,
    title,
    message,
    action_url,
    action_data,
    priority,
    category,
    icon,
    created_at
) 
SELECT 
    up.user_id,
    'booking_cancelled',
    'Booking Cancelled',
    'Booking #BK123 has been cancelled by customer',
    '/admin/bookings',
    '{"booking_reference": "BK123", "reason": "customer_request"}',
    'high',
    'booking',
    'XCircle',
    NOW() - INTERVAL '15 minutes'
FROM user_profiles up 
WHERE up.role IN ('admin', 'super_admin', 'staff')
LIMIT 1;

INSERT INTO notifications (
    user_id,
    type,
    title,
    message,
    action_url,
    action_data,
    priority,
    category,
    icon,
    created_at
) 
SELECT 
    up.user_id,
    'revenue_milestone',
    'Weekly Revenue Target Reached',
    'Congratulations! This week\'s revenue target has been achieved',
    '/admin/analytics',
    '{"amount": 2500, "target": 2000}',
    'normal',
    'system',
    'TrendingUp',
    NOW() - INTERVAL '1 hour'
FROM user_profiles up 
WHERE up.role IN ('admin', 'super_admin', 'staff')
LIMIT 1;

-- Grant permissions
GRANT ALL ON notifications TO service_role;
GRANT ALL ON notifications TO authenticated;

-- Comments
COMMENT ON TABLE notifications IS 'System notifications for admin users';
COMMENT ON FUNCTION create_notification IS 'Creates a new notification for a user';
COMMENT ON FUNCTION mark_notification_read IS 'Marks a notification as read';
COMMENT ON FUNCTION get_unread_notification_count IS 'Gets count of unread notifications for a user';